//===----------------------------------------------------------------------===//
//
// This source file is part of the Netbot open source project
//
// Copyright (c) 2023 Junfeng Zhang and the Netbot project authors
// Licensed under Apache License v2.0
//
// See LICENSE for license information
// See CONTRIBUTORS.txt for the list of Netbot project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Crypto
import Foundation
import NEPrettyBytes
import NIOCore
import NIOEmbedded
import XCTest

@testable import NEVMESS

let paddingMaskingAES128GCMResponse: [ByteBuffer] = [
  ByteBuffer(
    hexEncoded: "f9b53af2a0b7d87ca97fb9f089ba97ed114815ab943557c441cfc86700c4ddd21db3c6c49e7d"
  )!,
  ByteBuffer(bytes: [0x7d, 0x17]),
  ByteBuffer(
    hexEncoded:
      "7b18e184b326e2bc9cc5e3fcf502e9b31907c57c736f840114cc936efaa36f63945465271b9dd2ea7f2c5be1a9165d0c200ae94c74aec00540c8f888768dc013ea7f9f88916289635cd0b5ed566b303f744385c1e78a9f71d1522b880d6ed6225d273c83487fe8e848c628e16b123a2dbe7bd8dd218ef969ad669fe622bf29c4d2b1b87d4165ee8d2676ca2b557314b1f06de76bd9c82ecf5d79c84cf30670147c21ba2a8c7da2b80bf14aedd2c5cd2f39660ff20161eb41a17452cee68323c3ccfa98cc96027e1456955f50a6681b2caea7341ee44c1e61bd193ffe3e5b69ed91fcb44c5f386b1b2860f8936ed1c1e76703e65e5425d9b547faa7ebea66ffb964f07f1810f0535e3b22e0b16f4a5d637877f48c4b34b8cfe4adfdec72dab9c8191fb22b10decdb2df4ae45a02250342296f85bdd455c173cb2e6b564ad124aa41b43a51ec868ea28f11074fafc2321d7e2206c7e30a4570b5ddc5ae110526b6c4ec61acd7ab0dc4b899f89d7d25cad6f84fcac18dd09b795f08805d1722a6338b5f0aa9099dafe217a0a110778a57d20a25879c9a853a144efd6e541148c74f65209cd721f15de7d814437adda4c2d64e5e4e6a2d1c844560fcba930c4844bd98c2d64dc8fd67d5c5593da7ee07ae0a17100f5a8225da855ec9ac92d0268567c493ac8e9bdf059c0199d1a334d0e9bdfccaf714215f4b5bb7bf3e02c07ed487e1652775916486cfe85f67e17fd69b1beb0bca0f6ab9102dbdf8afecf4efcd433d0f3d1a0daf3a3b31f047bc71c91d338038bc2f660adbe7aa8f236faf0d6191b0abf2f434b0ce514617f99d1abf398bbc02825e65548d2824e1b3c35608ef95abee2a0cb2a725b13aa643ff5e14d82873b8bd46ea07748c9e1e1a8d865801c709f527db6cc3b41a2482b66f1ca73e21d52b375713d0bafcad837076ac37cad7bc248012102ef6f08f114355647b28e4ecd0236ce48443d1b7702e78ef001c3cd0f44f791adc77c1ac19c5010fd60888381d62dabe581c920a8fca6ba05e2b3b5cfee9f0836e3d9068270dde599ead3e898fb78656adf0a59799880089b19d77af26c503918f2d0615c609402512a690f33b3cc3be22cbc51df6bc315599a48a640d9a531eee1bb22a425bcdbf9800d52f6e734481adb361e028647c63a5cc5702f34ab43c73f18e204dfdccc4e2c66ebfea4df8f3a2fd04b0cb6bca654b30af30444352f68729900d902518fa1f5bde1876e6338525eef5c53772ab3052191bc3afc5589373f223ee68871ae7732e944a604c6884ca0693dc6fa49ed79fb0ffb173e882a24a220b5d661f04cff2a0175b81bc9d8f72b156d37d8cd3ded7d45003f8b505cb8d90fd9fcca646cd75193d2344b58e556c4549817539ad136aacf8bf8373979d0d8ab32d5103f145871ed17a4e0d8caf473dd1952341dd44da1dd1e266a53abcd99c8f7aafb1260c5ae36ae4c67ae3eaede3d3cd2f37fc0ce054fcee8aca85643f4c97884a13b47bbcf3ed22ea5e660f9aa5590d513aa93cabe4b97daa9fdd5ec45cb2a63a9ef49d08131568a204566874ab9c9d91f59c69df403fd3ce1c4341916ea4151d84214884fe7f141074358bce110aa9eede291fcb0239a63c4b5c35d91037791fcee88eb7204309672ec673028aca412f6e43de6829292d78251c44137eeeb46ca19a32b25af42fbf17cae52ef7ef87a3ae5ede4e49301ddf949c2d5add1e07efda22d38a5c1b1a6e2030c91070edbfb798ca766658ef5958a6fbfbff08f719c20fb08b62eff281cc2ef09a206602f6b4d5f8f602cdeea641a37087cc21db0f018259fcbb0483d5019e02af081df98c5e8dc5fdc4cd559c653145529a9b4f83e3186b9251d4fdb3627c1b17df6a459310da9469056073e458047bee9f3c0e9ef1aa27fc9d5c4cab1da48126d3225693262b33393c8d36bd976cf435183a00cf1d2db20b8fc365581a87034c62db6edfcd18538b179562fa17459788f181bc284840f57a78bc169f709f06e25563dd412e640ef121b15c6d18cddd1f4dda8721e775f1379a26d722c358f54fb2013b0adf3307c2158457d2892d00039ddf907ea76d93cad073d15a91ccf0844758f6d7db16d8f7febd2abe6ed994e66ee064d3da5a957cb127e3d61025861397b4a1424ca737d8e6ff7bab65d29676006e5d0ac07fdfa2b6e2f5b553e9f37f125d07540b299d2cf5cbaf82754dd14ea54eaac6463421314abbbc8bdf91e18c2de04d7e4f7004825aa436439ab5820d9c4de772bf42fb465946f0a50536ab5384e3150541aecb6aa736d60a25548ae54242330ef4a5bc2cbc588f9b85c104a5eb0b9ed76a8a123bb1020eb13372cf82f0b95a426f8101e482cb8bd0be049bea20c475dce04398d4116408cbdcec5be96f4406880054cbe93c3c7be8033ba6b734971f4228c57db6d638885c7f7bf39b2d4ecadf7c040b7ded6d55e9512b38277c0165607066a89f16d0915caab0673106139fb2676f75b6e849e670f940f4c0060c65cc72d6e55679aff99dd6f3b45cd484f5a42eb31df52ee49564212f9b33e886a9526b1ea9048a82e82ae4e61c461013a9c8ff8f1d039c00121843d3032d24bf639fe99de3e96c44723fd8ced4b8a5f10bc318e80f2785cca1caa80241261bd38917d08fa1ddea8c80a596b5a640f4dae9058faeedbb9445f97018c5805e40f238624cbf9caf40aa99de5b5f783476290039d06282acc60fe5fc53f819f7f74a17df82f576391f2361ba1fab67dd8f9068ae6a442e2a6564a023b764af93afa3109b2a70c2daaad318aeff374f7da1c62af4a593"
  )!,
  ByteBuffer(bytes: [0x62, 0x47]),
  ByteBuffer(
    hexEncoded:
      "f4e456ec4553a9c0a94237cb91f9affc9f5365b4bda1f5bfbcb5824b204e784f090d146723f4fb8f65aabac0f4cb6675c6224a4b2f223cf8cfa35929d485fa3ecf727c578f04881e6d4d1fa5858d46dc528cd70f7b329b77219580af4d48172db704dc93238c6cc03271933315034146b80aa326edcb60c134c45144c8941f769583bf8be47badcf75fb5ccdf1a07685fc467f9927c835b5b2ee7ca7cb94a05c58f5b8afbad98fe1ad199a5146aec17a7600fdef9dbe1f660eae7990685b0b9717a01041fa8133b88e7e1f76c617cfce31402d38fb32bc9c5b6b8cc96f31e80a111e90106c0d015ad1864b0210513a13c7fa494ac223d9401490f599bda5d0968a4c6e5863155eeaef3240214fea88e8cffa033b642438a094a6cc8297b60b3330f1a58d2c11bb30abde6875a15b96ff397521fd079a000868c0ee571399a95c723b5af6b7066e25046b390b43322de5e358fcc18eaada6a73e698e417baa192b28cfb2d036e87a7c886cdde05a9c415704ce267daf7f74ba25b5f4f0680f3fd0769a40d44e7151e36e17b0de8b6609317ce334a3f5448b37b65ef233ec7a71bcd4e72a59b91043afecd0e9539fb9205a76afa0c14e432a2d97e2f319047d336dc736c2b56b2c657e7ec4a9c1b008e644540d3217a3bb21be9ac8ed26063e9389c3e1f690e018b466838ba21519182fe82593b0b6ac2e9ea7cc3805868d37da9e847881fcbda1a6938e0710d7d31a78f36d7c00bd5f9b32aff1958fddf17aa7b734dd705b1ac66c99491787f8b263f0e7f0425e6cf89a07a568c6bdcb7ffd427b362f17e09821d599b09a3a7f1620cfe046ddcdefc962433ae60d04075e8c19ae8e7b2c7a306c9e4a56fb30afb6c677609ca20b5aa03c1eaff6369ef10b4c55251f65be02a5a329769857da5943d4858b6607a4977ed220a744f3d4dcd796739b923e25dc479bfdd39dcf3ae50b9916c58e00228955e6923d9959b6c5da3da9ca1956378e0d016ca7e4ddced8771add6968dd1e1c97441967b7c89bc1c9d60f95c06be078ebfaeb14ad127fa7880c1b7fb44078610548682896f927ba667ab3e2cd53dc91dcc475e58b47a7aa359030fb49fd10f89eca16d835cb682a6ef9e479163acfcb6d55d57dc5315c0f45ef0ca62dbc83369a2b774952067df088000149ad05b3d69e150ba1b25e2af2d240c016c7347dd70236bb8ca1975ffd0e00078df9ac21bc070f3b4ec95e3bedd69c048e29c138056381f3fa3c1b712de683be6d8a9644f48c8e0dcdf788a312fc4eeed6719f639fb722606a1eef8522d844422091afe12808818628ec9869cf1df4e39a659357f797ad70f7b909a7e970a24880a4067faba7427682fcc1a5692d9d68fce316876b6984a06564dc11a4eaaa4fa12cfed3c0f8ecac030db82d3a987f618f6d82d51277aaac64dd42737ed99b5d0f7282a90a98d761ab431e4884c9a74b33095378544763fc1bf5ce4d2101f704f11663c7a36d9861bcaa48a9d29d58b885e4a8a0420276b8260f37884ef4374cfc234822081146656c070a5294d5a28ee459fc62d8d39a152459fd4903e025d3e636303ab91c0dd353884fd26511e0e97110c578b2efe999c9b8ceaf6bb39d4f3bdc9efa0c6cf203fcca3cf6ead38694f9cf93f70326401970f1719e4e0a7a1a0d7a823078e3ce34a63842626fac2576e3f3ac830e038087de0068247295e78882f2fc18fab505f0c83dc7878e3879b778f3dc12340ac97693bb583872f577c9d3c823893fc98c85ea6ce318120eaff80ac071319a6dc466fd0d2d960a4909247f74f4f02ef3a8e4dff5b3a7e4b04daeab2d004151705efa545452aad7bca656512b64bbb542d3bfa7b13f28249c8f0e10857ef9ad3dc676bbde179ec6454416adb73f154486489bc230fd7b482561632745c60c6580e035f871c548fcc39fa6fec61a0298bb871c0ee49dd2eac28e6acc3e7f9043239fcbeb67332b51a3ff50f7e7723267544a01241b7a2ed275502c42be4106af07e4ff58ac7b63ba038f188a717d77585e726dcf9170239e3f40e181ff014d5b8e174f7c0c22b6fb7a121592e22ce9109baeb92ba3367c5b223b90e35ed9bd7385a645976b0eed0f37353723d2ad198d2c78fafbdfbea0b46d7d63e87e57c0232be633d7b3cdef75747480148fccae31556eb66dd3fa55b41ce218c230d5a31fff749e75d96342c6ca437ce85452828b27cf260820f1de9fd79bd4216f1499a56756fc3b5f4f52f49beb57cef95e9014024886c839a534515556737702cbdd335ee415776169a79aca424e907497d1b4426b02a396daffb924519a5dd40c8c50e8c62cf6177dd7d5efd971b208f0f25a714eef807edd68f8df16576b73312338b963fcab7ab1b27d1ca4076a45aa78bd2646025bc500785d0ebc9777368be8cb3972bf56fead73b1b341470cff14f56ebfb4918d4e216ef86822ff223fef6b9462c49f31db2ec1bb8264952a557585e24342964915bb4698f9c03cf93b2cdd1ded4de7232a79ca8a1f41b58ec28b3e63833134852dbdd26883dfb7d72322615dcda5ba59b283b41e1c5a09d1b6b7760a5df81918d5387e0b6cfee217f979a65b4993dec634510db7995d75ca82a896d45f32027a4ead850bde647c523082b40bdb1493b64c0d366c84c2f165d61ddfb7988c0abfd92cb864ac69b1155e2ead7efa2c53190da68f6a1e1cabb3c8cbc1bd3ac2e9233d0892da4ba0e7f4b319d33d56f946951db8f8f82ad9c2b994b54325e9efc825cb8b39fde470264094bc77047da57b3fe070a50ee6bd7044219"
  )!,
  ByteBuffer(bytes: [0x0d, 0x05]),
  ByteBuffer(
    hexEncoded:
      "514b1f031a81d18230697c8421fe1539c16e1630b6fd6c643d851f1b541f8b6c62bc9e4f5cbafa64ac08942517a331501cdbba5b84e0077504a210d444a093884d8f27f3e147d6c486b088ef5a2ba5d9b968821d300218eb301c3495fe85299f4d9f003b10e72564a18f388ae4466531ea3426f1a0981b60f85e5c773a55f3c32b9ae4ace35b7044c18566a88d959e6e332f544d0d632b99b84c2279d46f124b734a96595f075518e3b2ff3c787abdb56362035574ee96ef2f790eaaea30548e90e0836871d73dd09dc49eb3d3bbe259ab68852888f951f9b699181e146a2aba2bb3d34a0508ffef6ec549cc83faed7a674cbaf7eb616d8b6a9bfaa040ad30b5170d3b26920d792a69592eeff8c53bade9fe65d13cbf64bbbdc41691f2ded0a85edf1beeb12362ed96fd6746b7d45bc6cd26a52d33d929a928fa44352ff6ac02c39a52f8ef8507e4482f45f1dc47049467bc6746ff705ff9a9353afc7e84edd029a9c863e547cdaefcd5919307036e8a0abce9be0abbb21889b60fc3ab5852891ad9f95b11c2ef080698deb80c5934"
  )!,
]

struct ResponseTestsData {
  static let expectedFirstFrame =
    "160303007a0200007603037caf6b3bf3ccb49001734fee3fea7b523ca88d02592828d8637e29820abff2cf208c3d3bff02f7df023a3e86847fde1ce1b04c2b4dfb84802660fc0af43beaeae7130100002e002b0002030400330024001d002009bbf908550873fa21f94361c57f8825674f7d792722e4bbfd168ba0ed70e2361403030001011703030024f9b3bb04f2416d97991c21fd1959a8f349a5d2e911876d0f5e4d1e333b9fcbc5776bb2c51703030ddaf1d416526eca016eff71615efd121efdaf66547c2608d56ad72eedfdbe95a5868d66abd02508600d53e1616f04f756a00b69f97b258ba7bb2674177237c3f01f6e3a463905f8408527d909c65d925869f3dfce983da4bc0e44657d1e75a8f61c90f2ecd68a923235ee1e061a9c4e08b4d065de5ae2b04a134e426c561f023bb65ca5b1c8c0c8d13339ed4803bfcea6abeaad37c0e05eb888c204ba961dc663223d80ba55e15200436bfb81ef52f9e2543947821a16be52ad1ff1264ce9e8295ab7652cab1d2e51dbaec4517e10d37d19c788291ae53517e191b92b76c1cb4d36d3feff8d8cf00a4d0c27ad7906b7580e86d50b940fc8f8cc126e961797dd11d4e6900051be64c8cca08f85f58a74b6a4a729ef15e4923f354e659b827d59a132793752285ef7c7bcf5836d3608e3dd9d8f416eb2c6d73eea0f79bc3e1271f58225f656573aaf9d633421a10892bfd2a501899d87d6a934f499078bca410f7fd73a0a352a204936715d6237353d224894a3d2972933f57a2f62eb31789679c7b15e94ccb8fb613ee5e2d7acd6a1e4f676195f80abbce1c4579dd076d932262597e12c3db134900b3009bd9fd0d1d67fdbbb4f7f45e41e198744c1b912a1e3d3200526183f63b76b172a403038fa7909833ab6512eb2f504479f0a85d070b3dd7f6edc891573f5c0c48bfcabf369b46bef7f7fe8a562a3357a378d413fe3468f17eeff8286d55206ba1cbe0625e0c0073ca4d54e97822d608f3dbc051a4d4f64c6a6adc3e9bffb95e11b8d0caf68f3faeab933ac1e823b92ae225ac59e25c799ffa13a47338b236f80056c8872137214ea1077034147e655cd0eb75691363909232983ec3cebee278a765ce3a848c55252a99b3c10b72a493218e56ad8cc0449accfa8f011ea5fc0e18fd3db5f0823e82be24faf1a3bbdd60c080e7831299bed91915028c30b8cf952c3ed66788c3d5f1d391014339e13296719b08682aaf5240e62f44eecf25adfd5652303e4c16f58b14365c2757f2c5865f4c4c78d47efe0c812c11986651d08f4b99312a4d231fe410af1f205fa4468f46e09de9551ba4cc59a1dabc683654ad07f9d70afba0641702e00d16c1fb52926c58eb4174654c375586f09cbed1466eabeaded41e5b8cd857e2c166ba498de29887fbdd1118955ce7c68a587c39f35c15f77d7ae48df2fac1dca68e6e07c5c0935c8fa521b1eea5fc0b212205229a047af76c82a117ed99bb5a94164327a3576d9ba88d2cef572227b8a5503c58520d54f1156d543d9ac0f6643b0b5361f76a393e01806822ffd9288803242cc1140f985fd6094cb193ce90a35181021787f47b631b0ffedf12d843978aa00492e540c9a071b8716d2d86f0c8c063f894a2bd7facdb4d3bf359e8722af6d6d6e9167680dc5577185145b68018050489366982249862d2a8e92930409c6b713e51e2aefa39fdac69b966a7fce4d83694fe2082f6fc93592ab0b8bc6c81a4f9004a4033649ac220db5680303e3bf514fb422a20b87f2c59bd20590a7353c6caa8ee12ac468737468533dd7dbc9b8761b4dd8f826333065a8ef6adc0dceda3c3aff336ab57fd8147cec5067c3a4f09a9edbc39b2e1a1833b9dbeeaee833cec3e39e46d39f8a73313027b43567d895d3e4188dcc9b9df6d6c28cab8e0c4bf4c842e3f7f7cbf0d27dd4fadb3a00643982a741f4eb4054b0563a1262dc6a771669a4d974f9f658d3a9270ffd076cb67e7cd24506b1c3e53a3904070c34fbd54eecbe5d92972420317f2dcdea9f4d38d655125b36868fa762e11b4aa0c6751662c7949ef02cd11e4db27e9576e18edd517f5fca2780de3db6918c4b8178dfc4f965bb4578c50350357b397eae063e07ac49cb33937871c27df4846856b385a498cc7846d53268d145e151e0d0006f311e6f556b77cbd82ca4135722e91a1c26069e87f6629415270054130ce3a2b4ae53265ff2a76024f2738b5ee0c3d658c414e94aef06e8f9bb76afb8c35f43282be6c44624029c8deb4f07fae23390cb0f5cf4157ce1773c42bf09785308035aa6b4c4101640716b6f4f0a81570eaf8f74628ed179c9459748c4ed851fd9c9b4be58673d04d76694370f29e4f132661e7d8b644831c8fefce8bae6c0a3d25450f5dee1a024f2060b198d7ebf9e12bf7284aeb369f7402599a4db763adcbcdd6a05ac5c8ba9c9994493253633b075868de91227acbdc3524df477afdbd98203b0c5edf53be7d4ceaf84cb48c0de0d072ee0cad3d5c9c1a2ea8d581f3ab5680387b6b39e3316feb9794eea0b5ec7a9cb1f9e6f1499e460dff5db7e8a9c0179253369f368f0307c7ae4affdad5730453c19ea27cc86cbed986dd0c25e99fdf3619dc8a7a4eb111fab448ce3f99d750ba754d000fd296be5e391b393413ac88eb7dcf952595d2d03f231bd5fa915cbb4d8b0574033d9d8a4ffe7cb68346d59a034ca09a5f94160ad0d82d9cf1724a2f8c37198cf761b5878df6f80e2d7b121db7755f5774d5fa90ff5faa5f052"

  static let expectedSecondFrame =
    "45c3401070f5308fde3a10c3e38f8d7805c60398115779536d2e4389a9a8f5ac75217a56ecf972b45d2940cf956f69ca7e23d3d16e542bdc3184522a159b1f88652df46a476ccb2939a081565f3db00cd4f7b55ae33e0ede0410721d39fc20423be74c73cda7cca84682fa028d8ce40ca0afc1dc57b532fe5c7290ceb4e4ad47b40fef789be0bd7bac08df3d3f250b54dbe5fe27473f41c21926fc0ac848e7169c7e7cff86e2faca7dbfbd82c1e92d926f62045f283e229d95ecb1bcf8ef4ad330f4f8fe545a8f3cd7e5211297e806f3b7c06a1924050f5cba3cfa8bc79d57fdd0aed858a3c8163d25247a4366ecfcfc9d787dc7ff66df28accc2432fbebf589c2f4347c3a0beb36f1416d58c2730a6eb3fefb81105aa6d1626e03cfb79b10e48098d3e3d55f3d778aa5d92a3ed8f897ee45cac45f6a5cb11f06206daa34d726598b88451b019da6c567407a88a2f8ac7cbee24160ad3e43f306c57463d9d9eaf3ec2eed0c5f211cde7a38ea0f96ab24e277e7db567a6ea84a0333e04965e5dbe368dfdff1dad48c905ecf33f6f24825bbec32ef1b6f08b415ffae75f5ffddf2d1da188575b803fcddaa48e6b23d0a4d9b33ad432d0b29d90158054e916387b5d94882b4b75d63cb1fb074d969f57673db99295d5d4b18fe73ca0e8f3a43c4630ac1ff3d27cf3496df8f52d8ab9684b0c99612f4371f183c848968f91530f8ed789f403f5e5c54c76b6a296bfc3c1829c2105aa530dbaead2db474b6165792db90dbe563db1db7502c46a06065ebfb36e77feb594da7503085527ce6162cd67995a793455bfa9063eec7b3fef159489e5f5171f2f397d342a7e9c56709a6172c4029f7320cb5c83ca1f8c64d3b6c570c6cc0afa4c4a2fad6ed444d625bc366abe0641252d093406713dd7ef587b2825fd63051dcb9a62a7d6dab90d8f618d0642017733ff453ccd673f7f4b7c9ee3ca25ad2a96318e733858b02349e55fffeb64660a695a3382ab943f3a6352245819e7dd8efe6fe5c4f686ac443ed80e429338be93898093b636e762482a7aa01c68ecadc1226e04890dffe8805e6db340ac5068a8afbdbf601cb4c262336f21f274ce630f7e3065a12a75044c7a0969f1248f1f81a32c4f4533cea62234c26a19aed54955ab1ff14d784d7150e325be651517cb635ed89fb8c15849e5a891fee30af3ba77909495b9282d4316f64daaa070a9ec04a0b9e5ae3c2c392bc583c50257fd5039a41e465a7b777301616eb1c1f2f8cc088275f48cca8387c38b12acb4521b28c348d7b93e80c6b62c92791136d49d5d3aab48f1c7ad5028e1f14b6613a7562e03de9333ad5a65f5d2a196d8d59bf2e9461d2c4bdc41010df9446ecede6f0fc74c66285f3d11f0de60a68ae113f1ee5f50742f42787114c7a8ff2dfcb0f67f51046c48d7f6a45669330f69f4177c51b58a12f03df8b6e4e07a91bf5c2d6acf1ff41859dcd4f370d53332d688ed3abd2ca321d2cde925e381aa99c63dc36be22715586fbbf1d61e0d0b3a01d854e50a62afbca5ba777a2cb84f140d5708604d1b7607617478c446048976b5f253c42c5e1948e35925fcc8319d3edda9659193f972e04684d0fc82a86fc3b333ad206367d805435a68bf2ec61ddb1a623e23c800d699016b3f27bad5851986a4961f757049a6c2a963b0882823cb03e9ea594ea50295061644d30e1b95bb8dc436e73e00bd4c5d3e3d08259b0635d858be74bb0dc82d02e731bcc28e87f4e573ee4417c634aa378c6b6453a3d6413370635d78e44ea30fca2d4f156b89d9a0929d660331ce34d6b67a46b9704421f4422f8a64c46cc72d855b346ee5d25bab089571684e51c54898331925a7f1261c3878e2577c0ac1f4a8776d13f2eabf923423e1f2ad60d69a871a0dc71ac2e8e061f4b5f524d23387f41b7afcf75497521d0f7e2c5185544638445965c673ad1b89ccd477dfa9a111b438f73876208924bd07075ba15fa9b013c9cabaedb4b45bada6eb062de9310d60df55f712ba710b17493f5d590f3bffbc41a99833dcf39f68fc5dd103b5f946457c18685dba7db4e3b5d4cd325bf88cb28bd6de4efc799c1d84f77b6275a1d8f3627f7888821bee337e8485b05a35ef7c3c22c297f509dea36078e775e6c8a05b2aec2f792ab14d2ab94021e88f7a371cf5b0ce56702b09ef4528d0a459016a4d3ea45444d40f649eb73e712b4507fecf078c3842fdf2776558770bdb8cf40e536af5b0b257337e31910e6bf32d803d187909d158c69ddd5206c27068630ddd5670f15f69e5f7e85f381f31bb20994bee4073f203d6f30110436db87d4b6d9b0e24488a477c3517e9417d6ba8e34444dc8ad65a1c031b915d930928185bcd9f84837ee1979e2b8f524514570926102948b6b54f67554bfcb91075331893441b8892bc1c26489cc9386a51cef6e45dba0306c86bd0a5923e64a53f1e8244ba19f8388c69846c8cf488697170303011935c19ac6cf13e5546d45844b3a0e8d4d6a7d867bd891ab146a159a7b74c80d7dbdb886147afb966bfbbf0296a5f8676fa1a03dd31e7d8c7d11d05874fb81de8a8bec5f7a0d08833a9b2fe10489685082faa9ee0020f76ab1a03a00fbd1f798fdc2993e189b39a1d18937631202221b29807307e02a8ab8f7ae5f2ba86b2b57249a7c4d11f4dbcfcfa2f72a9c7e77ce04560d78b5c3e2e00944ecab7d9bee98c7ea9df3538b361e0e59daa30eee68423b78928312293f3cc82098b9628b0a600d334ee676bb27e0ed0d2c"

  static let expectedThirdFrame =
    "3379fbdc9f262f16e347dc2f221772279bf78ff37c3aea01d75e4ac90a231846a0fbbfcb4d55683a36bb6ea8314c4548ba3bd2407d09f9794ca88f4f8b50fba28e62bbc90366be4eb23b94d5ceda5717030300354f27574f0e156b0c798af52705d86b01aa3620a2d7de0defde8e803d5f7685aa6413a9fc3fc13770a1aa1f040300620e58879c731617030300c2752e20dcd95f21cf38f43c7b1e1877c78d7e472f6c19f617e3eb25b240f31ac6861b87a02590834b6167b5df648d0c867cbe7acf3b771b22e1ea5504e7048c6b534e3345b2c529fb45a056e452f5e2cc0dcbf5875feb2e0b495fea48bce8263b88acef3c6f38ef4f1b24dcb3d82ff7db7f3bf44893c3ded54f240f5e1f9378570237d553e6ec542157e5d6f8678f46c0475b80e2e4faa65e9b1251b28cdd86747e6511048f09c004220ed5bdb04864f8321cdefa246b76a8572f9a6f6ef14de18435"
}

final class VMESSDecoderTests: XCTestCase {

  var channel: EmbeddedChannel!
  var eventLoop: EmbeddedEventLoop {
    channel.embeddedEventLoop
  }

  let authenticationCode: UInt8 = 0x3d
  let symmetricKey = SymmetricKey(data: Data(hexEncoded: "45d4c42bbefab09de35e498fca4ff920")!)
  let nonce = Array(hexEncoded: "9ebdbde706ba8d3e6e96241dc6344afa")!

  override func setUpWithError() throws {
    channel = EmbeddedChannel()
  }

  func testBasicVerifications() throws {
    let decoder = VMESSDecoder<VMESSPart<VMESSResponseHead, ByteBuffer>>(
      authenticationCode: authenticationCode,
      contentSecurity: .aes128Gcm,
      symmetricKey: symmetricKey,
      nonce: nonce,
      options: .init(),
      commandCode: .tcp
    )
    XCTAssertNoThrow(try channel.pipeline.addHandler(ByteToMessageHandler(decoder)).wait())

    var expected = VMESSPart<VMESSResponseHead, ByteBuffer>.head(
      .init(
        authenticationCode: authenticationCode,
        options: .init(rawValue: 0),
        commandCode: .init(rawValue: 0),
        command: nil
      )
    )
    try channel.writeInbound(paddingMaskingAES128GCMResponse[0])
    XCTAssertEqual(
      try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self),
      expected
    )

    expected = .body(ByteBuffer(hexEncoded: ResponseTestsData.expectedFirstFrame)!)

    try channel.writeInbound(paddingMaskingAES128GCMResponse[1])
    try channel.writeInbound(paddingMaskingAES128GCMResponse[2])
    XCTAssertEqual(
      try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self),
      expected
    )

    expected = .body(ByteBuffer(hexEncoded: ResponseTestsData.expectedSecondFrame)!)
    try channel.writeInbound(paddingMaskingAES128GCMResponse[3])
    try channel.writeInbound(paddingMaskingAES128GCMResponse[4])
    XCTAssertEqual(
      try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self),
      expected
    )

    expected = .body(ByteBuffer(hexEncoded: ResponseTestsData.expectedThirdFrame)!)
    try channel.writeInbound(paddingMaskingAES128GCMResponse[5])
    try channel.writeInbound(paddingMaskingAES128GCMResponse[6])
    XCTAssertEqual(
      try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self),
      expected
    )
    XCTAssertNoThrow(try channel.finish())
  }

  func testUsingInsufficientDataToParseResponseHeadersThatDoNotContainCommands() throws {
    let decoder = VMESSDecoder<VMESSPart<VMESSResponseHead, ByteBuffer>>(
      authenticationCode: authenticationCode,
      contentSecurity: .aes128Gcm,
      symmetricKey: symmetricKey,
      nonce: nonce,
      options: .init(),
      commandCode: .tcp
    )
    XCTAssertNoThrow(try channel.pipeline.addHandler(ByteToMessageHandler(decoder)).wait())

    var data = ByteBuffer(hexEncoded: "f9b53af2a0b7d87ca97fb9f089ba97ed11")!
    XCTAssertNoThrow(try channel.writeInbound(data))
    // Need more bytes to parse ciphertext length.
    XCTAssertNil(try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self))

    data = ByteBuffer(hexEncoded: "4815ab943557c441cfc86700c4ddd21db3c6c49e")!
    XCTAssertNoThrow(try channel.writeInbound(data))
    // Need more bytes to parse head part data.
    XCTAssertNil(try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self))

    data = ByteBuffer(bytes: [0x7d])
    XCTAssertNoThrow(try channel.writeInbound(data))
    let expected = VMESSPart<VMESSResponseHead, ByteBuffer>.head(
      .init(
        authenticationCode: authenticationCode,
        options: .init(rawValue: 0),
        commandCode: .init(rawValue: 0),
        command: nil
      )
    )
    XCTAssertEqual(
      try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self),
      expected
    )
  }

  func testParsingResponseHeaderWithDataContainingIncorrectlyEncryptedHeaderDataLength() {
    let decoder = VMESSDecoder<VMESSPart<VMESSResponseHead, ByteBuffer>>(
      authenticationCode: authenticationCode,
      contentSecurity: .aes128Gcm,
      symmetricKey: symmetricKey,
      nonce: nonce,
      options: .init(),
      commandCode: .tcp
    )
    XCTAssertNoThrow(try channel.pipeline.addHandler(ByteToMessageHandler(decoder)).wait())

    let data = ByteBuffer(hexEncoded: "f9b53af2a0b7d87ca97fb9f089ba97ed1149")!
    XCTAssertThrowsError(try channel.writeInbound(data)) { error in
      #if canImport(CryptoKit)
      guard case .authenticationFailure = error as? CryptoKitError else {
        XCTFail("error should be CryptoKitError.authenticationFailure but got \(error)")
        return
      }
      #else
      XCTAssertTrue(error is CryptoKitError, "error should be CryptoKitError")
      #endif
    }
  }

  func testParsingResponseHeaderWithDataContainingIncorrectlyEncryptedHeaderData() {
    let decoder = VMESSDecoder<VMESSPart<VMESSResponseHead, ByteBuffer>>(
      authenticationCode: authenticationCode,
      contentSecurity: .aes128Gcm,
      symmetricKey: symmetricKey,
      nonce: nonce,
      options: .init(),
      commandCode: .tcp
    )
    XCTAssertNoThrow(try channel.pipeline.addHandler(ByteToMessageHandler(decoder)).wait())

    let data = ByteBuffer(
      hexEncoded: "f9b53af2a0b7d87ca97fb9f089ba97ed114815ab943557c441cfc86700c4ddd21db3c6c49e7e"
    )!
    XCTAssertThrowsError(try channel.writeInbound(data)) { error in
      #if canImport(CryptoKit)
      guard case .authenticationFailure = error as? CryptoKitError else {
        XCTFail("error should be CryptoKitError.authenticationFailure but got \(error)")
        return
      }
      #else
      XCTAssertTrue(error is CryptoKitError, "error should be CryptoKitError")
      #endif
    }
  }

  func testParsingResponseFrameWithInsufficientDataAndPaddingMaskingStreamOptions() throws {
    let decoder = VMESSDecoder<VMESSPart<VMESSResponseHead, ByteBuffer>>(
      authenticationCode: authenticationCode,
      contentSecurity: .aes128Gcm,
      symmetricKey: symmetricKey,
      nonce: nonce,
      options: [.chunkStream, .chunkMasking, .globalPadding],
      commandCode: .tcp
    )
    XCTAssertNoThrow(try channel.pipeline.addHandler(ByteToMessageHandler(decoder)).wait())

    XCTAssertNoThrow(try channel.writeInbound(paddingMaskingAES128GCMResponse[0]))
    // Move decoding state forward to `frameLengthBegin`.
    _ = try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self)

    XCTAssertNoThrow(try channel.writeInbound(ByteBuffer(bytes: [0x7d])))
    // Need more bytes to parse frame length
    XCTAssertNil(try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self))

    XCTAssertNoThrow(try channel.writeInbound(ByteBuffer(bytes: [0x17])))
    // Ok, we got frame length but need more bytes to parse frame.
    XCTAssertNil(try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self))

    // Need more bytes to parse frame.
    var data = paddingMaskingAES128GCMResponse[2]
    data = data.readSlice(length: data.readableBytes - 1)!
    XCTAssertNoThrow(try channel.writeInbound(data))

    // Now, we got first frame.
    XCTAssertNoThrow(try channel.writeInbound(ByteBuffer(bytes: [0x93])))
    let expected = VMESSPart<VMESSResponseHead, ByteBuffer>.body(
      ByteBuffer(hexEncoded: ResponseTestsData.expectedFirstFrame)!
    )
    XCTAssertEqual(
      try channel.readInbound(as: VMESSPart<VMESSResponseHead, ByteBuffer>.self),
      expected
    )
  }
}
