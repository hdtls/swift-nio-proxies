//===----------------------------------------------------------------------===//
//
// This source file is part of the Netbot open source project
//
// Copyright (c) 2022 Junfeng Zhang and the Netbot project authors
// Licensed under Apache License v2.0
//
// See LICENSE for license information
// See CONTRIBUTORS.txt for the list of Netbot project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Crypto
import NIO
import NIONetbotMisc
import PrettyBytes
import XCTest

@testable import NIOSS
%{
ciphers = [
    {
        "algo": "AES-128-GCM",
        "cipher": "AES.GCM",
        "key_size": 16,
        "salt_size": 16,
    },
    {
        "algo": "AES-256-GCM",
        "cipher": "AES.GCM",
        "key_size": 32,
        "salt_size": 32,
    },
    {
        "algo": "ChaCha20-Poly1305",
        "cipher": "ChaChaPoly",
        "key_size": 32,
        "salt_size": 32,
    }
]

def removeDash(input):
    return input.replace('-', '')
}%

final class ResponseDecoderTests: XCTestCase {
    %for cipher in ciphers:

    func testDecodeShadowsocksResponseWith${removeDash(cipher['algo'])}() throws {
        let passwordReference = "BeMWIH2K5YtZ"
        let handler = ByteToMessageHandler(
            ResponseDecoder(
                algorithm: .init(rawValue: "${cipher['algo']}")!,
                passwordReference: passwordReference
            )
        )
        let channel = EmbeddedChannel(handler: handler)
        var nonce = [UInt8](repeating: 0, count: 12)
        let salt = SecureBytes(count: ${cipher['salt_size']})
        let symmetricKey = hkdfDerivedSymmetricKey(
            secretKey: passwordReference,
            salt: salt,
            outputByteCount: ${cipher['key_size']}
        )
        let packets: [[UInt8]] = [
            [1, 2],
            [3, 4],
            [5],
        ]
        for (i, packet) in packets.enumerated() {
            var byteBuffer = ByteBuffer()
            byteBuffer.writeInteger(UInt16(packet.count))
            var message = byteBuffer.readBytes(length: byteBuffer.readableBytes)!
            byteBuffer.discardReadBytes()

            if i == 0 {
                byteBuffer.writeBytes(salt)
            }

            var sealedBox = try ${cipher['cipher']}.seal(
                message,
                using: symmetricKey,
                nonce: .init(data: nonce)
            )
            nonce.increment(nonce.count)
            byteBuffer.writeBytes(sealedBox.ciphertext)
            byteBuffer.writeBytes(sealedBox.tag)

            message = packet
            sealedBox = try ${cipher['cipher']}.seal(
                message,
                using: symmetricKey,
                nonce: .init(data: nonce)
            )
            nonce.increment(nonce.count)
            byteBuffer.writeBytes(sealedBox.ciphertext)
            byteBuffer.writeBytes(sealedBox.tag)

            try channel.writeInbound(byteBuffer)
            XCTAssertEqual(try channel.readInbound(as: ByteBuffer.self), ByteBuffer(bytes: packet))
        }
    }
    %end
}
