//===----------------------------------------------------------------------===//
//
// This source file is part of the Netbot open source project
//
// Copyright (c) 2021 Junfeng Zhang and the Netbot project authors
// Licensed under Apache License v2.0
//
// See LICENSE for license information
// See CONTRIBUTORS.txt for the list of Netbot project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import NIONetbot
import XCTest

@testable import NetbotCLICore

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

///
/// NOTE: This file was generated by gyb
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///

final class ParsableRuleTests: XCTestCase {

    func testParsingDomainRule() throws {
        let description = "DOMAIN,swift.org,DIRECT"
        XCTAssertNoThrow(try DomainRule.validate(description))
        let standardRule = DomainRule.init(description)!
        XCTAssertEqual(standardRule.expression, "swift.org")
        XCTAssertEqual(standardRule.policy, "DIRECT")
        XCTAssertEqual(standardRule.description, description)
    }

    func testAppropriateErrorWhenParsingDomainRuleWithInvalidSchema() {
        let description = "invalidSchema,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .unsupported)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        let parsableRule = DomainRule.init(description)
        XCTAssertNil(parsableRule)
    }

    func testAppropriateErrorWhenParsingDomainRuleWithIncompleteDescriptionString() {
        let description = "DOMAIN"

        XCTAssertThrowsError(try DomainRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .missingField)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainRule.init("DOMAIN"))
    }

    func testAppropriateErrorWhenParseDomainRuleAsDomainSuffixRule() {
        let description = "DOMAIN,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainSuffixRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSuffixRule.self,
                        butCanBeParsedAs: DomainRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainRule.init("DOMAIN"))
    }

    func testAppropriateErrorWhenParseDomainRuleAsDomainKeywordRule() {
        let description = "DOMAIN,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainKeywordRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainKeywordRule.self,
                        butCanBeParsedAs: DomainRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainRule.init("DOMAIN"))
    }

    func testAppropriateErrorWhenParseDomainRuleAsDomainSetRule() {
        let description = "DOMAIN,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSetRule.self,
                        butCanBeParsedAs: DomainRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainRule.init("DOMAIN"))
    }

    func testAppropriateErrorWhenParseDomainRuleAsGeoIPRule() {
        let description = "DOMAIN,swift.org,DIRECT"

        XCTAssertThrowsError(try GeoIPRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        GeoIPRule.self,
                        butCanBeParsedAs: DomainRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainRule.init("DOMAIN"))
    }

    func testAppropriateErrorWhenParseDomainRuleAsFinalRule() {
        let description = "DOMAIN,swift.org,DIRECT"

        XCTAssertThrowsError(try FinalRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        FinalRule.self,
                        butCanBeParsedAs: DomainRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainRule.init("DOMAIN"))
    }

    func testAppropriateErrorWhenParseDomainRuleAsRuleSetRule() {
        let description = "DOMAIN,swift.org,DIRECT"

        XCTAssertThrowsError(try RuleSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        RuleSetRule.self,
                        butCanBeParsedAs: DomainRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainRule.init("DOMAIN"))
    }

    func testParsingDomainSuffixRule() throws {
        let description = "DOMAIN-SUFFIX,swift.org,DIRECT"
        XCTAssertNoThrow(try DomainSuffixRule.validate(description))
        let standardRule = DomainSuffixRule.init(description)!
        XCTAssertEqual(standardRule.expression, "swift.org")
        XCTAssertEqual(standardRule.policy, "DIRECT")
        XCTAssertEqual(standardRule.description, description)
    }

    func testAppropriateErrorWhenParsingDomainSuffixRuleWithInvalidSchema() {
        let description = "invalidSchema,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainSuffixRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .unsupported)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        let parsableRule = DomainSuffixRule.init(description)
        XCTAssertNil(parsableRule)
    }

    func testAppropriateErrorWhenParsingDomainSuffixRuleWithIncompleteDescriptionString() {
        let description = "DOMAIN-SUFFIX"

        XCTAssertThrowsError(try DomainSuffixRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .missingField)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSuffixRule.init("DOMAIN-SUFFIX"))
    }

    func testAppropriateErrorWhenParseDomainSuffixRuleAsDomainRule() {
        let description = "DOMAIN-SUFFIX,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainRule.self,
                        butCanBeParsedAs: DomainSuffixRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSuffixRule.init("DOMAIN-SUFFIX"))
    }

    func testAppropriateErrorWhenParseDomainSuffixRuleAsDomainKeywordRule() {
        let description = "DOMAIN-SUFFIX,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainKeywordRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainKeywordRule.self,
                        butCanBeParsedAs: DomainSuffixRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSuffixRule.init("DOMAIN-SUFFIX"))
    }

    func testAppropriateErrorWhenParseDomainSuffixRuleAsDomainSetRule() {
        let description = "DOMAIN-SUFFIX,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSetRule.self,
                        butCanBeParsedAs: DomainSuffixRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSuffixRule.init("DOMAIN-SUFFIX"))
    }

    func testAppropriateErrorWhenParseDomainSuffixRuleAsGeoIPRule() {
        let description = "DOMAIN-SUFFIX,swift.org,DIRECT"

        XCTAssertThrowsError(try GeoIPRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        GeoIPRule.self,
                        butCanBeParsedAs: DomainSuffixRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSuffixRule.init("DOMAIN-SUFFIX"))
    }

    func testAppropriateErrorWhenParseDomainSuffixRuleAsFinalRule() {
        let description = "DOMAIN-SUFFIX,swift.org,DIRECT"

        XCTAssertThrowsError(try FinalRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        FinalRule.self,
                        butCanBeParsedAs: DomainSuffixRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSuffixRule.init("DOMAIN-SUFFIX"))
    }

    func testAppropriateErrorWhenParseDomainSuffixRuleAsRuleSetRule() {
        let description = "DOMAIN-SUFFIX,swift.org,DIRECT"

        XCTAssertThrowsError(try RuleSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        RuleSetRule.self,
                        butCanBeParsedAs: DomainSuffixRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSuffixRule.init("DOMAIN-SUFFIX"))
    }

    func testParsingDomainKeywordRule() throws {
        let description = "DOMAIN-KEYWORD,swift.org,DIRECT"
        XCTAssertNoThrow(try DomainKeywordRule.validate(description))
        let standardRule = DomainKeywordRule.init(description)!
        XCTAssertEqual(standardRule.expression, "swift.org")
        XCTAssertEqual(standardRule.policy, "DIRECT")
        XCTAssertEqual(standardRule.description, description)
    }

    func testAppropriateErrorWhenParsingDomainKeywordRuleWithInvalidSchema() {
        let description = "invalidSchema,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainKeywordRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .unsupported)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        let parsableRule = DomainKeywordRule.init(description)
        XCTAssertNil(parsableRule)
    }

    func testAppropriateErrorWhenParsingDomainKeywordRuleWithIncompleteDescriptionString() {
        let description = "DOMAIN-KEYWORD"

        XCTAssertThrowsError(try DomainKeywordRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .missingField)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainKeywordRule.init("DOMAIN-KEYWORD"))
    }

    func testAppropriateErrorWhenParseDomainKeywordRuleAsDomainRule() {
        let description = "DOMAIN-KEYWORD,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainRule.self,
                        butCanBeParsedAs: DomainKeywordRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainKeywordRule.init("DOMAIN-KEYWORD"))
    }

    func testAppropriateErrorWhenParseDomainKeywordRuleAsDomainSuffixRule() {
        let description = "DOMAIN-KEYWORD,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainSuffixRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSuffixRule.self,
                        butCanBeParsedAs: DomainKeywordRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainKeywordRule.init("DOMAIN-KEYWORD"))
    }

    func testAppropriateErrorWhenParseDomainKeywordRuleAsDomainSetRule() {
        let description = "DOMAIN-KEYWORD,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSetRule.self,
                        butCanBeParsedAs: DomainKeywordRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainKeywordRule.init("DOMAIN-KEYWORD"))
    }

    func testAppropriateErrorWhenParseDomainKeywordRuleAsGeoIPRule() {
        let description = "DOMAIN-KEYWORD,swift.org,DIRECT"

        XCTAssertThrowsError(try GeoIPRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        GeoIPRule.self,
                        butCanBeParsedAs: DomainKeywordRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainKeywordRule.init("DOMAIN-KEYWORD"))
    }

    func testAppropriateErrorWhenParseDomainKeywordRuleAsFinalRule() {
        let description = "DOMAIN-KEYWORD,swift.org,DIRECT"

        XCTAssertThrowsError(try FinalRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        FinalRule.self,
                        butCanBeParsedAs: DomainKeywordRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainKeywordRule.init("DOMAIN-KEYWORD"))
    }

    func testAppropriateErrorWhenParseDomainKeywordRuleAsRuleSetRule() {
        let description = "DOMAIN-KEYWORD,swift.org,DIRECT"

        XCTAssertThrowsError(try RuleSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        RuleSetRule.self,
                        butCanBeParsedAs: DomainKeywordRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainKeywordRule.init("DOMAIN-KEYWORD"))
    }

    func testParsingDomainSetRule() throws {
        let description = "DOMAIN-SET,http://domainset.com,DIRECT"
        XCTAssertNoThrow(try DomainSetRule.validate(description))
        let standardRule = DomainSetRule.init(description)!
        XCTAssertEqual(standardRule.expression, "http://domainset.com")
        XCTAssertEqual(standardRule.policy, "DIRECT")
        XCTAssertEqual(standardRule.description, description)
    }

    func testAppropriateErrorWhenParsingDomainSetRuleWithInvalidSchema() {
        let description = "invalidSchema,http://domainset.com,DIRECT"

        XCTAssertThrowsError(try DomainSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .unsupported)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        let parsableRule = DomainSetRule.init(description)
        XCTAssertNil(parsableRule)
    }

    func testAppropriateErrorWhenParsingDomainSetRuleWithIncompleteDescriptionString() {
        let description = "DOMAIN-SET"

        XCTAssertThrowsError(try DomainSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .missingField)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSetRule.init("DOMAIN-SET"))
    }

    func testAppropriateErrorWhenParseDomainSetRuleAsDomainRule() {
        let description = "DOMAIN-SET,http://domainset.com,DIRECT"

        XCTAssertThrowsError(try DomainRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainRule.self,
                        butCanBeParsedAs: DomainSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSetRule.init("DOMAIN-SET"))
    }

    func testAppropriateErrorWhenParseDomainSetRuleAsDomainSuffixRule() {
        let description = "DOMAIN-SET,http://domainset.com,DIRECT"

        XCTAssertThrowsError(try DomainSuffixRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSuffixRule.self,
                        butCanBeParsedAs: DomainSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSetRule.init("DOMAIN-SET"))
    }

    func testAppropriateErrorWhenParseDomainSetRuleAsDomainKeywordRule() {
        let description = "DOMAIN-SET,http://domainset.com,DIRECT"

        XCTAssertThrowsError(try DomainKeywordRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainKeywordRule.self,
                        butCanBeParsedAs: DomainSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSetRule.init("DOMAIN-SET"))
    }

    func testAppropriateErrorWhenParseDomainSetRuleAsGeoIPRule() {
        let description = "DOMAIN-SET,http://domainset.com,DIRECT"

        XCTAssertThrowsError(try GeoIPRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        GeoIPRule.self,
                        butCanBeParsedAs: DomainSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSetRule.init("DOMAIN-SET"))
    }

    func testAppropriateErrorWhenParseDomainSetRuleAsFinalRule() {
        let description = "DOMAIN-SET,http://domainset.com,DIRECT"

        XCTAssertThrowsError(try FinalRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        FinalRule.self,
                        butCanBeParsedAs: DomainSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSetRule.init("DOMAIN-SET"))
    }

    func testAppropriateErrorWhenParseDomainSetRuleAsRuleSetRule() {
        let description = "DOMAIN-SET,http://domainset.com,DIRECT"

        XCTAssertThrowsError(try RuleSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        RuleSetRule.self,
                        butCanBeParsedAs: DomainSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(DomainSetRule.init("DOMAIN-SET"))
    }

    func testParsingGeoIPRule() throws {
        let description = "GEOIP,swift.org,DIRECT"
        XCTAssertNoThrow(try GeoIPRule.validate(description))
        let standardRule = GeoIPRule.init(description)!
        XCTAssertEqual(standardRule.expression, "swift.org")
        XCTAssertEqual(standardRule.policy, "DIRECT")
        XCTAssertEqual(standardRule.description, description)
    }

    func testAppropriateErrorWhenParsingGeoIPRuleWithInvalidSchema() {
        let description = "invalidSchema,swift.org,DIRECT"

        XCTAssertThrowsError(try GeoIPRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .unsupported)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        let parsableRule = GeoIPRule.init(description)
        XCTAssertNil(parsableRule)
    }

    func testAppropriateErrorWhenParsingGeoIPRuleWithIncompleteDescriptionString() {
        let description = "GEOIP"

        XCTAssertThrowsError(try GeoIPRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .missingField)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(GeoIPRule.init("GEOIP"))
    }

    func testAppropriateErrorWhenParseGeoIPRuleAsDomainRule() {
        let description = "GEOIP,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainRule.self,
                        butCanBeParsedAs: GeoIPRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(GeoIPRule.init("GEOIP"))
    }

    func testAppropriateErrorWhenParseGeoIPRuleAsDomainSuffixRule() {
        let description = "GEOIP,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainSuffixRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSuffixRule.self,
                        butCanBeParsedAs: GeoIPRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(GeoIPRule.init("GEOIP"))
    }

    func testAppropriateErrorWhenParseGeoIPRuleAsDomainKeywordRule() {
        let description = "GEOIP,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainKeywordRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainKeywordRule.self,
                        butCanBeParsedAs: GeoIPRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(GeoIPRule.init("GEOIP"))
    }

    func testAppropriateErrorWhenParseGeoIPRuleAsDomainSetRule() {
        let description = "GEOIP,swift.org,DIRECT"

        XCTAssertThrowsError(try DomainSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSetRule.self,
                        butCanBeParsedAs: GeoIPRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(GeoIPRule.init("GEOIP"))
    }

    func testAppropriateErrorWhenParseGeoIPRuleAsFinalRule() {
        let description = "GEOIP,swift.org,DIRECT"

        XCTAssertThrowsError(try FinalRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        FinalRule.self,
                        butCanBeParsedAs: GeoIPRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(GeoIPRule.init("GEOIP"))
    }

    func testAppropriateErrorWhenParseGeoIPRuleAsRuleSetRule() {
        let description = "GEOIP,swift.org,DIRECT"

        XCTAssertThrowsError(try RuleSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        RuleSetRule.self,
                        butCanBeParsedAs: GeoIPRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(GeoIPRule.init("GEOIP"))
    }

    func testParsingFinalRule() throws {
        let description = "FINAL,DIRECT"
        XCTAssertNoThrow(try FinalRule.validate(description))
        let standardRule = FinalRule.init(description)!
        XCTAssertEqual(standardRule.expression, "")
        XCTAssertEqual(standardRule.policy, "DIRECT")
        XCTAssertEqual(standardRule.description, description)
    }

    func testAppropriateErrorWhenParsingFinalRuleWithInvalidSchema() {
        let description = "invalidSchema,DIRECT"

        XCTAssertThrowsError(try FinalRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .unsupported)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        let parsableRule = FinalRule.init(description)
        XCTAssertNil(parsableRule)
    }

    func testAppropriateErrorWhenParsingFinalRuleWithIncompleteDescriptionString() {
        let description = "FINAL"

        XCTAssertThrowsError(try FinalRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .missingField)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(FinalRule.init("FINAL"))
    }

    func testAppropriateErrorWhenParseFinalRuleAsDomainRule() {
        let description = "FINAL,DIRECT"

        XCTAssertThrowsError(try DomainRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainRule.self,
                        butCanBeParsedAs: FinalRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(FinalRule.init("FINAL"))
    }

    func testAppropriateErrorWhenParseFinalRuleAsDomainSuffixRule() {
        let description = "FINAL,DIRECT"

        XCTAssertThrowsError(try DomainSuffixRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSuffixRule.self,
                        butCanBeParsedAs: FinalRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(FinalRule.init("FINAL"))
    }

    func testAppropriateErrorWhenParseFinalRuleAsDomainKeywordRule() {
        let description = "FINAL,DIRECT"

        XCTAssertThrowsError(try DomainKeywordRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainKeywordRule.self,
                        butCanBeParsedAs: FinalRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(FinalRule.init("FINAL"))
    }

    func testAppropriateErrorWhenParseFinalRuleAsDomainSetRule() {
        let description = "FINAL,DIRECT"

        XCTAssertThrowsError(try DomainSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSetRule.self,
                        butCanBeParsedAs: FinalRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(FinalRule.init("FINAL"))
    }

    func testAppropriateErrorWhenParseFinalRuleAsGeoIPRule() {
        let description = "FINAL,DIRECT"

        XCTAssertThrowsError(try GeoIPRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        GeoIPRule.self,
                        butCanBeParsedAs: FinalRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(FinalRule.init("FINAL"))
    }

    func testAppropriateErrorWhenParseFinalRuleAsRuleSetRule() {
        let description = "FINAL,DIRECT"

        XCTAssertThrowsError(try RuleSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        RuleSetRule.self,
                        butCanBeParsedAs: FinalRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(FinalRule.init("FINAL"))
    }

    func testParsingRuleSetRule() throws {
        let description = "RULE-SET,http://ruleset.com,DIRECT"
        XCTAssertNoThrow(try RuleSetRule.validate(description))
        let standardRule = RuleSetRule.init(description)!
        XCTAssertEqual(standardRule.expression, "http://ruleset.com")
        XCTAssertEqual(standardRule.policy, "DIRECT")
        XCTAssertEqual(standardRule.description, description)
    }

    func testAppropriateErrorWhenParsingRuleSetRuleWithInvalidSchema() {
        let description = "invalidSchema,http://ruleset.com,DIRECT"

        XCTAssertThrowsError(try RuleSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .unsupported)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        let parsableRule = RuleSetRule.init(description)
        XCTAssertNil(parsableRule)
    }

    func testAppropriateErrorWhenParsingRuleSetRuleWithIncompleteDescriptionString() {
        let description = "RULE-SET"

        XCTAssertThrowsError(try RuleSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(reason: .missingField)
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(RuleSetRule.init("RULE-SET"))
    }

    func testAppropriateErrorWhenParseRuleSetRuleAsDomainRule() {
        let description = "RULE-SET,http://ruleset.com,DIRECT"

        XCTAssertThrowsError(try DomainRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainRule.self,
                        butCanBeParsedAs: RuleSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(RuleSetRule.init("RULE-SET"))
    }

    func testAppropriateErrorWhenParseRuleSetRuleAsDomainSuffixRule() {
        let description = "RULE-SET,http://ruleset.com,DIRECT"

        XCTAssertThrowsError(try DomainSuffixRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSuffixRule.self,
                        butCanBeParsedAs: RuleSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(RuleSetRule.init("RULE-SET"))
    }

    func testAppropriateErrorWhenParseRuleSetRuleAsDomainKeywordRule() {
        let description = "RULE-SET,http://ruleset.com,DIRECT"

        XCTAssertThrowsError(try DomainKeywordRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainKeywordRule.self,
                        butCanBeParsedAs: RuleSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(RuleSetRule.init("RULE-SET"))
    }

    func testAppropriateErrorWhenParseRuleSetRuleAsDomainSetRule() {
        let description = "RULE-SET,http://ruleset.com,DIRECT"

        XCTAssertThrowsError(try DomainSetRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        DomainSetRule.self,
                        butCanBeParsedAs: RuleSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(RuleSetRule.init("RULE-SET"))
    }

    func testAppropriateErrorWhenParseRuleSetRuleAsGeoIPRule() {
        let description = "RULE-SET,http://ruleset.com,DIRECT"

        XCTAssertThrowsError(try GeoIPRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        GeoIPRule.self,
                        butCanBeParsedAs: RuleSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(RuleSetRule.init("RULE-SET"))
    }

    func testAppropriateErrorWhenParseRuleSetRuleAsFinalRule() {
        let description = "RULE-SET,http://ruleset.com,DIRECT"

        XCTAssertThrowsError(try FinalRule.validate(description)) { error in
            XCTAssertTrue(error is ProfileSerializationError)
            let actualErrorString = String(describing: error as! ProfileSerializationError)
            let expectedErrorString = String(
                describing: ProfileSerializationError.failedToParseRule(
                    reason: .failedToParseAs(
                        FinalRule.self,
                        butCanBeParsedAs: RuleSetRule.self
                    )
                )
            )
            XCTAssertEqual(actualErrorString, expectedErrorString)
        }

        XCTAssertNil(RuleSetRule.init("RULE-SET"))
    }
}
